{"version":3,"sources":["../node_modules/keyv/src sync","../node_modules/got/source sync","Config.js","components/ModalForm.js","components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","instanceLocator","secretKey","ModalForm","props","useState","show","setsShow","isNewUser","setIsNewUser","handleClose","selectId","setSelectId","newId","setNewId","newName","setNewName","Modal","onHide","size","centered","backdrop","Header","Title","Body","Form","Group","as","Col","controlId","Label","Control","type","placeholder","value","onChange","event","target","allUser","map","userId","index","key","Footer","Button","variant","onClick","createNewUser","handleLogin","disabled","length","Message","className","userName","text","MessageList","shouldScrollToBottom","setShouldScrollToBottom","fragmentRef","useRef","messages","useEffect","node","current","scrollTop","clientHeight","scrollHeight","useLayoutEffect","currentRoomId","ref","message","sender","name","parts","payload","content","SendMessageForm","handleChange","setState","handleSubmit","preventDefault","sendSimpleMessage","state","bind","onSubmit","this","React","Component","RoomList","orderedRooms","rooms","sort","room1","room2","style","color","fontWeight","room","isActive","href","subscribeToRoom","NewRoomForm","newRoomName","setNewRoomName","createNewRoom","required","Chat","setCurrentRoomId","setMessages","currentUser","setCurrentUser","joinableRooms","setJoinableRooms","joinedRooms","setJoinedRooms","roomId","subscribeToRoomMultipart","hooks","onMessage","prevMessages","then","getJoinRoom","catch","err","console","log","useCallback","getJoinableRooms","ChatManager","tokenProvider","TokenProvider","url","connect","currUser","createRoom","App","chatkit","require","default","setAllUser","getUsers","res","user","createUser","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcd1d54c.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 279;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 287;","// // credentialsto interact with the particular instance of Chatkit.\r\n// const instanceLocator = 'v1:us1:f3ee33a7-98b6-4cf5-83c6-18d1eb8ce0f7';\r\n// // Test Token Provider EndPoint\r\n// const tokenUrl = 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/f3ee33a7-98b6-4cf5-83c6-18d1eb8ce0f7/token';\r\n\r\n// const secretKey = '7feb4da2-3512-4a3e-b84b-ddf73605355f:XpXk9TYsrvejw/pPlhguixfycePVyEbLHCJhCkAjtc4=';\r\n// export { instanceLocator, tokenUrl, secretKey }\r\n\r\n// credentialsto interact with the particular instance of Chatkit.\r\nconst instanceLocator = 'v1:us1:92b5460a-4e86-43cf-8c76-89d7244eddb1';\r\n// Test Token Provider EndPoint\r\nconst tokenUrl = 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/92b5460a-4e86-43cf-8c76-89d7244eddb1/token';\r\n\r\nconst secretKey = 'd53611a7-c21a-4b5e-9283-1af5193cc23c:hstf+QJivn9tn+Y75+4/elSVeqzCRm2BUSYYX9PTuEI=';\r\nexport { instanceLocator, tokenUrl, secretKey }","import React, { useState } from 'react';\r\nimport { Modal, Button, Col, Form } from 'react-bootstrap';\r\n\r\nconst ModalForm = (props) => {\r\n    const [show, setsShow] = useState(true);\r\n    const [isNewUser, setIsNewUser] = useState(false);\r\n    const handleClose = () => setsShow(false);\r\n\r\n    const [selectId, setSelectId] = useState('Choose...');\r\n    const handleIdChange = (event) => {\r\n        // console.log(event.target.value)\r\n        setSelectId(event.target.value);\r\n    }\r\n\r\n    const [newId, setNewId] = useState('');\r\n    const [newName, setNewName] = useState('');\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value);\r\n    }\r\n    const handleNewIdChange = (event) => {\r\n        setNewId(event.target.value);\r\n    }\r\n\r\n    return (\r\n        // backdrop=\"static\" so clickscreen wont turn off Modal\r\n        <Modal show={show} onHide={handleClose} size=\"sm\" centered backdrop=\"static\">\r\n            <Modal.Header>\r\n                <Modal.Title>{isNewUser ? 'New User' : 'Authentication'}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                {\r\n                    isNewUser ?\r\n                        (<Form.Group as={Col} controlId=\"formGridState\">\r\n                            <Form.Label>LOGIN ID</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"enter id\" value={newId} onChange={handleNewIdChange}/>\r\n                            <br />\r\n                            <Form.Label>DISPLAY NAME</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"enter name\" value={newName} onChange={handleNameChange}/>\r\n                        </Form.Group>)\r\n                        :\r\n                        (<Form.Group as={Col} controlId=\"formGridState\">\r\n                            <Form.Label>Login as</Form.Label>\r\n                            <Form.Control as=\"select\" onChange={handleIdChange}>\r\n                                <option>Choose...</option>\r\n                                {\r\n                                    props.allUser.map((userId, index) => {\r\n                                        return (\r\n                                            <option value={userId} key={index}>{userId}</option>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </Form.Control>\r\n                        </Form.Group>)\r\n                }\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button\r\n                    variant=\"Success\"\r\n                    onClick={() => {\r\n                        if (!isNewUser) {\r\n                            props.handleLogin(selectId);\r\n                            handleClose();\r\n                        }\r\n                        else {\r\n                            props.createNewUser(newId, newName);\r\n                            handleClose();\r\n                        }\r\n                    }}\r\n                    disabled={!isNewUser ? selectId === 'Choose...' : newName.length===0 || newId.length===0 }\r\n                >\r\n                    {isNewUser ? 'Confirm' : 'Login'}\r\n                </Button>\r\n                <Button\r\n                    variant=\"Warning\"\r\n                    onClick={() => {\r\n                        setIsNewUser(true)\r\n                    }}\r\n                    disabled={selectId !== 'Choose...' || isNewUser}\r\n                >\r\n                    Create New User\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ModalForm; ","import React from 'react'\r\n\r\nfunction Message(props) {\r\n    return (\r\n        <div className=\"message\">\r\n            <div className=\"message-username\">{props.userName}</div>\r\n            <div className=\"message-text\">{props.text}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message\r\n","import React, { useLayoutEffect, useRef, useState, useEffect } from 'react'\r\nimport Message from './Message'\r\n\r\nfunction MessageList(props) {\r\n    const [shouldScrollToBottom, setShouldScrollToBottom] = useState(false);\r\n    let fragmentRef = useRef();\r\n    const { messages } = props;\r\n\r\n    useEffect(() => {\r\n        let node = fragmentRef.current;\r\n        // if just a bit above the bottom of scroll, set state to true\r\n        // avoid scrolling on top messages and income message makes you go to bottom\r\n        setShouldScrollToBottom(node.scrollTop + node.clientHeight + 200 >= node.scrollHeight);\r\n    });\r\n\r\n    useLayoutEffect(() => {\r\n        let node = fragmentRef.current;\r\n        if (shouldScrollToBottom) {\r\n            node.scrollTop = node.scrollHeight;\r\n        }\r\n    }, [messages, shouldScrollToBottom]);\r\n\r\n    if (!props.currentRoomId) {\r\n        return (\r\n            <div ref={fragmentRef} className=\"message-list\">\r\n                <div className=\"join-room\">\r\n                    &larr; Join a room!\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div ref={fragmentRef} className=\"message-list\">\r\n            {messages.map((message, index) => {\r\n                return (\r\n                    <Message\r\n                        key={index}\r\n                        // message.senderId is authentication Id\r\n                        userName={message.sender.name}\r\n                        text={message.parts[0].payload.content}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageList\r\n\r\n// class MessageList extends React.Component {\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"message-list\">\r\n//                 {this.props.messages.map((message, index) => {\r\n//                     return (\r\n//                         <Message\r\n//                             key={index}\r\n//                             userName={message.senderId}\r\n//                             text={message.parts[0].payload.content}\r\n//                         />\r\n//                     )\r\n//                 })}\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default MessageList\r\n","import React from 'react'\r\n\r\nclass SendMessageForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            message: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        // console.log(event.target.value);\r\n        this.setState({\r\n            message: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        // preventDefault() method tells the user agent that if the event does not get explicitly \r\n        // handled, its default action should not be taken as it normally would be. \r\n        event.preventDefault();\r\n        // console.log(this.state.message);\r\n        this.props.sendSimpleMessage(this.state.message);\r\n        // clear message after sending -> value\r\n        this.setState({\r\n            message: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                className=\"send-message-form\"\r\n                onSubmit={this.handleSubmit}\r\n            >\r\n                <input\r\n                    disabled={this.props.disabled}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Type message and press ENTER to send\"\r\n                    type=\"text\"\r\n                    value={this.state.message}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SendMessageForm","import React from 'react'\r\n\r\nclass RoomList extends React.Component {\r\n    render() {\r\n        // sort modifies array, so copy array as to not messed up props\r\n        // sort rooms such that rooms i.e [joinableRooms, joinedRooms] are always in same order\r\n        const orderedRooms = [...this.props.rooms].sort((room1, room2) => room1.name > room2.name);\r\n        return (\r\n            <div className=\"rooms-list\">\r\n                <ul>\r\n                    <h3 style={{color: '#191970', fontWeight: 100}}>MY ROOMS:</h3>\r\n                    {orderedRooms.map(room => {\r\n                        const isActive = room.id === this.props.currentRoomId ? \"active\" : \" \";\r\n                        return (\r\n                            <li key={room.id} className={\"room \" + isActive} >\r\n                                <a\r\n                                    href=\"#\"\r\n                                    // onClick={this.props.subscribeToRoom(room.id)} -> if write like\r\n                                    // this it will be called immediately on component render not on\r\n                                    // onClick event\r\n                                    onClick={() => this.props.subscribeToRoom(room.id)}\r\n                                >\r\n                                    # {room.name}\r\n                                </a>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RoomList","import React, { useState } from 'react'\r\n\r\nfunction NewRoomForm(props) {\r\n    const [newRoomName, setNewRoomName] = useState(\"\");\r\n    let handleChange = (event) => {\r\n        setNewRoomName(event.target.value);\r\n    }\r\n\r\n    let handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.createNewRoom(newRoomName);\r\n        setNewRoomName(\"\");\r\n    }\r\n\r\n    return (\r\n        <div onSubmit={handleSubmit} className=\"new-room-form\">\r\n            <form>\r\n                <input\r\n                    onChange={handleChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new room name\"\r\n                    required \r\n                    value={newRoomName}\r\n                />\r\n                <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewRoomForm\r\n\r\n// class NewRoomForm extends React.Component {\r\n//     render() {\r\n//         return (\r\n//             <div className=\"new-room-form\">\r\n//                 <form>\r\n//                     <input\r\n//                         onChange={handleChange}\r\n//                         type=\"text\"\r\n//                         placeholder=\"NewRoomForm\"\r\n//                         required />\r\n//                     <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n//                 </form>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default NewRoomForm","import React, { useEffect, useState, useCallback } from 'react';\r\nimport {\r\n  ChatManager, TokenProvider\r\n} from '@pusher/chatkit-client';\r\n\r\nimport MessageList from './components/MessageList';\r\nimport SendMessageForm from './components/SendMessageForm';\r\nimport RoomList from './components/RoomList';\r\nimport NewRoomForm from './components/NewRoomForm';\r\nimport { instanceLocator, tokenUrl } from './Config';\r\n\r\nconst Chat = (props) => {\r\n  const [currentRoomId, setCurrentRoomId] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [joinableRooms, setJoinableRooms] = useState([]);\r\n  const [joinedRooms, setJoinedRooms] = useState([]);\r\n\r\n  const sendSimpleMessage = (text) => {\r\n    // send simple text\r\n    currentUser.sendSimpleMessage({\r\n      text: text,\r\n      roomId: currentRoomId\r\n    });\r\n  }\r\n\r\n  let subscribeToRoom = (roomId) => {\r\n    setMessages([]);\r\n    currentUser.subscribeToRoomMultipart({\r\n      // roomId: '7b7a1d23-e869-4c19-8eab-e88d5144dd72',\r\n      roomId: roomId,\r\n      hooks: {\r\n        onMessage: message => {\r\n          // console.log('message object: ', message.parts[0].payload.content);\r\n          setMessages(prevMessages => [...prevMessages, message]);\r\n        }\r\n      }\r\n    }).then((room) => {\r\n      // reset state joinableRooms, joinedRooms\r\n      getJoinRoom()\r\n      setCurrentRoomId(room.id);\r\n    }).catch((err) => {\r\n      console.log('Error on subscribing to room', err);\r\n    })\r\n  };\r\n\r\n  let getJoinRoom = useCallback(() => {\r\n    if (!currentUser) {\r\n      return;\r\n    }\r\n    currentUser.getJoinableRooms()\r\n      .then(joinableRooms => {\r\n        setJoinableRooms(joinableRooms);\r\n        setJoinedRooms(currentUser.rooms);\r\n      }).catch(err => {\r\n        console.log('Error on getting joinable rooms', err);\r\n      });\r\n  }, [currentUser])\r\n\r\n  let createNewRoom = (newRoomName) => {\r\n    currentUser.createRoom({\r\n      name: newRoomName\r\n    }).then(room => {\r\n      subscribeToRoom(room.id)\r\n    }).catch(err => {\r\n      console.log('Error on create new room', err);\r\n    });\r\n  }\r\n\r\n  // To get started with Chatkit you will need to instantiate both a ChatManager \r\n  // instance as well as a TokenProvider instance to authenticate users. \r\n  // https://pusher.com/docs/chatkit/reference/javascript#chat-managerm\r\n  useEffect(() => {\r\n    const chatManager = new ChatManager({\r\n      instanceLocator: instanceLocator,\r\n      userId: props.selectId,\r\n      tokenProvider: new TokenProvider({\r\n        url: tokenUrl\r\n      })\r\n    });\r\n\r\n    // Once you’ve initialized your Chat Manager you are ready to connect to the Chatkit servers. \r\n    // The connect method returns a promise that resolves with a Current User object.\r\n    // ChatManager.connect: https://pusher.com/docs/chatkit/reference/javascript#connect\r\n    // CurrentUser: https://pusher.com/docs/chatkit/reference/javascript#current-user\r\n    chatManager.connect()\r\n      .then(currUser => {\r\n        setCurrentUser(currUser);\r\n        getJoinRoom();\r\n      }).catch(err => {\r\n        console.log('Error on connection', err)\r\n      })\r\n\r\n  }, [getJoinRoom]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <RoomList\r\n        currentRoomId={currentRoomId}\r\n        rooms={[...joinableRooms, ...joinedRooms]}\r\n        subscribeToRoom={subscribeToRoom}\r\n      />\r\n      <MessageList\r\n        currentRoomId={currentRoomId}\r\n        messages={messages}\r\n      />\r\n      <SendMessageForm\r\n        disabled={currentRoomId === null}\r\n        sendSimpleMessage={sendSimpleMessage}\r\n      />\r\n      <NewRoomForm createNewRoom={createNewRoom} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;","import React, { useEffect, useState } from 'react';\n\nimport { instanceLocator, secretKey } from './Config';\nimport ModalForm from './components/ModalForm';\nimport Chat from './Chat';\n\nfunction App() {\n  const Chatkit = require('@pusher/chatkit-server');\n  const chatkit = new Chatkit.default({\n    instanceLocator: instanceLocator,\n    key: secretKey\n  })\n  \n  const [allUser, setAllUser] = useState([]);\n  const [selectId, setSelectId] = useState('ShiangHu');\n\n  useEffect(() => {\n    chatkit.getUsers()\n      .then((res) => {\n        // console.log(res);\n        setAllUser(res.map(user => { return user.id }))\n      }).catch((err) => {\n        console.log(err);\n      });\n  }, [])\n\n  const handleLogin = (id) => {\n    setSelectId(id);\n  }\n\n  const createNewUser = (id, name) => {\n    chatkit.createUser({\n      id: id,\n      name: name\n    }).then(() => {\n      console.log('User created successfully');\n    }).catch((err) => {\n      console.log(err);\n    });\n    handleLogin(id);\n  }\n\n  return (\n    <div>\n      <ModalForm allUser={allUser} handleLogin={handleLogin} createNewUser={createNewUser} />\n      <Chat selectId={selectId} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/App';\nimport * as serviceWorker from '../src/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}